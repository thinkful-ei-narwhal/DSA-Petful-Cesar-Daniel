{"ast":null,"code":"var _jsxFileName = \"/Users/danieljsottile/thinkful/Petful/DSA-Petful/petful-client-template/src/components/NameForm/NameForm.js\";\nimport React, { Component } from 'react';\nimport ValidationError from '../ValidationError';\nexport class NameForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: {\n        value: '',\n        touched: false\n      }\n    };\n  }\n\n  validateName() {\n    const name = this.state.name.value;\n\n    if (!name) {\n      return 'name is required';\n    }\n  }\n\n  updateName(name) {\n    this.setState({\n      name: {\n        value: name,\n        touched: true\n      }\n    });\n  }\n\n  render() {\n    const nameError = this.validateName();\n    return React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, this.state.name.touched && React.createElement(ValidationError, {\n      message: nameError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"name:\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      onChange: e => this.updateName(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      value: \"Submit\",\n      disabled: this.validateName(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\nexport default NameForm;","map":{"version":3,"sources":["/Users/danieljsottile/thinkful/Petful/DSA-Petful/petful-client-template/src/components/NameForm/NameForm.js"],"names":["React","Component","ValidationError","NameForm","constructor","props","state","name","value","touched","validateName","updateName","setState","render","nameError","e","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA,OAAO,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AACtCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE,EADH;AAEJC,QAAAA,OAAO,EAAE;AAFL;AADK,KAAb;AAMD;;AAEDC,EAAAA,YAAY,GAAG;AACb,UAAMH,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBC,KAA7B;;AACA,QAAI,CAACD,IAAL,EAAW;AACT,aAAO,kBAAP;AACD;AACF;;AACDI,EAAAA,UAAU,CAACJ,IAAD,EAAO;AACf,SAAKK,QAAL,CAAc;AAAEL,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAED,IAAT;AAAeE,QAAAA,OAAO,EAAE;AAAxB;AAAR,KAAd;AACD;;AAGDI,EAAAA,MAAM,GAAG;AACP,UAAMC,SAAS,GAAG,KAAKJ,YAAL,EAAlB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKJ,KAAL,CAAWC,IAAX,CAAgBE,OAAhB,IAA2B,oBAAC,eAAD;AAAiB,MAAA,OAAO,EAAEK,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD9B,EAEE;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EAGE;AAAO,MAAA,IAAI,EAAE,MAAb;AAAoB,MAAA,IAAI,EAAC,MAAzB;AAAgC,MAAA,EAAE,EAAE,MAApC;AACA,MAAA,QAAQ,EAAGC,CAAD,IAAO,KAAKJ,UAAL,CAAgBI,CAAC,CAACC,MAAF,CAASR,KAAzB,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAOE;AAAQ,MAAA,IAAI,EAAE,QAAd;AAAuB,MAAA,KAAK,EAAC,QAA7B;AAAsC,MAAA,QAAQ,EAAE,KAAKE,YAAL,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,CADF;AAaD;;AArCqC;AAwCxC,eAAeP,QAAf","sourcesContent":["import React, { Component } from 'react'\nimport ValidationError from '../ValidationError'\n\nexport class NameForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: {\n        value: '',\n        touched: false,\n      }\n    };\n  }\n\n  validateName() {\n    const name = this.state.name.value;\n    if (!name) {\n      return 'name is required';\n    } \n  }\n  updateName(name) {\n    this.setState({ name: { value: name, touched: true } });\n  }\n\n\n  render() {\n    const nameError = this.validateName();\n    return (\n      <form>\n        {this.state.name.touched && <ValidationError message={nameError} />}\n        <label htmlFor='name'>name:</label>\n        <input type= 'text' name='name' id= 'name' \n        onChange={(e) => this.updateName(e.target.value)}>\n        </input>\n    \n        <button type= 'submit' value='Submit' disabled={this.validateName()}>\n          Submit\n        </button>\n      </form>\n    )\n  }\n}\n\nexport default NameForm\n"]},"metadata":{},"sourceType":"module"}